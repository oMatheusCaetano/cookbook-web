/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SairRouteImport } from './routes/sair'
import { Route as Public_onlyRouteRouteImport } from './routes/_public_only/route'
import { Route as AuthenticatedOnlyRouteRouteImport } from './routes/_authenticated-only/route'
import { Route as AuthenticatedOnlyIndexRouteImport } from './routes/_authenticated-only/index'
import { Route as Public_onlyRegistrarIndexRouteImport } from './routes/_public_only/registrar/index'
import { Route as Public_onlyEntrarIndexRouteImport } from './routes/_public_only/entrar/index'
import { Route as AuthenticatedOnlyReceitaIdIndexRouteImport } from './routes/_authenticated-only/receita/$id/index'
import { Route as AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRouteImport } from './routes/_authenticated-only/receita/cadastro/{-$id}/index'

const SairRoute = SairRouteImport.update({
  id: '/sair',
  path: '/sair',
  getParentRoute: () => rootRouteImport,
} as any)
const Public_onlyRouteRoute = Public_onlyRouteRouteImport.update({
  id: '/_public_only',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOnlyRouteRoute = AuthenticatedOnlyRouteRouteImport.update({
  id: '/_authenticated-only',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOnlyIndexRoute = AuthenticatedOnlyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedOnlyRouteRoute,
} as any)
const Public_onlyRegistrarIndexRoute =
  Public_onlyRegistrarIndexRouteImport.update({
    id: '/registrar/',
    path: '/registrar/',
    getParentRoute: () => Public_onlyRouteRoute,
  } as any)
const Public_onlyEntrarIndexRoute = Public_onlyEntrarIndexRouteImport.update({
  id: '/entrar/',
  path: '/entrar/',
  getParentRoute: () => Public_onlyRouteRoute,
} as any)
const AuthenticatedOnlyReceitaIdIndexRoute =
  AuthenticatedOnlyReceitaIdIndexRouteImport.update({
    id: '/receita/$id/',
    path: '/receita/$id/',
    getParentRoute: () => AuthenticatedOnlyRouteRoute,
  } as any)
const AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute =
  AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRouteImport.update({
    id: '/receita/cadastro/{-$id}/',
    path: '/receita/cadastro/{-$id}/',
    getParentRoute: () => AuthenticatedOnlyRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/sair': typeof SairRoute
  '/': typeof AuthenticatedOnlyIndexRoute
  '/entrar': typeof Public_onlyEntrarIndexRoute
  '/registrar': typeof Public_onlyRegistrarIndexRoute
  '/receita/$id': typeof AuthenticatedOnlyReceitaIdIndexRoute
  '/receita/cadastro/{-$id}': typeof AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute
}
export interface FileRoutesByTo {
  '/sair': typeof SairRoute
  '/': typeof AuthenticatedOnlyIndexRoute
  '/entrar': typeof Public_onlyEntrarIndexRoute
  '/registrar': typeof Public_onlyRegistrarIndexRoute
  '/receita/$id': typeof AuthenticatedOnlyReceitaIdIndexRoute
  '/receita/cadastro/{-$id}': typeof AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated-only': typeof AuthenticatedOnlyRouteRouteWithChildren
  '/_public_only': typeof Public_onlyRouteRouteWithChildren
  '/sair': typeof SairRoute
  '/_authenticated-only/': typeof AuthenticatedOnlyIndexRoute
  '/_public_only/entrar/': typeof Public_onlyEntrarIndexRoute
  '/_public_only/registrar/': typeof Public_onlyRegistrarIndexRoute
  '/_authenticated-only/receita/$id/': typeof AuthenticatedOnlyReceitaIdIndexRoute
  '/_authenticated-only/receita/cadastro/{-$id}/': typeof AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sair'
    | '/'
    | '/entrar'
    | '/registrar'
    | '/receita/$id'
    | '/receita/cadastro/{-$id}'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/sair'
    | '/'
    | '/entrar'
    | '/registrar'
    | '/receita/$id'
    | '/receita/cadastro/{-$id}'
  id:
    | '__root__'
    | '/_authenticated-only'
    | '/_public_only'
    | '/sair'
    | '/_authenticated-only/'
    | '/_public_only/entrar/'
    | '/_public_only/registrar/'
    | '/_authenticated-only/receita/$id/'
    | '/_authenticated-only/receita/cadastro/{-$id}/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedOnlyRouteRoute: typeof AuthenticatedOnlyRouteRouteWithChildren
  Public_onlyRouteRoute: typeof Public_onlyRouteRouteWithChildren
  SairRoute: typeof SairRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sair': {
      id: '/sair'
      path: '/sair'
      fullPath: '/sair'
      preLoaderRoute: typeof SairRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public_only': {
      id: '/_public_only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Public_onlyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-only': {
      id: '/_authenticated-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedOnlyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-only/': {
      id: '/_authenticated-only/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedOnlyIndexRouteImport
      parentRoute: typeof AuthenticatedOnlyRouteRoute
    }
    '/_public_only/registrar/': {
      id: '/_public_only/registrar/'
      path: '/registrar'
      fullPath: '/registrar'
      preLoaderRoute: typeof Public_onlyRegistrarIndexRouteImport
      parentRoute: typeof Public_onlyRouteRoute
    }
    '/_public_only/entrar/': {
      id: '/_public_only/entrar/'
      path: '/entrar'
      fullPath: '/entrar'
      preLoaderRoute: typeof Public_onlyEntrarIndexRouteImport
      parentRoute: typeof Public_onlyRouteRoute
    }
    '/_authenticated-only/receita/$id/': {
      id: '/_authenticated-only/receita/$id/'
      path: '/receita/$id'
      fullPath: '/receita/$id'
      preLoaderRoute: typeof AuthenticatedOnlyReceitaIdIndexRouteImport
      parentRoute: typeof AuthenticatedOnlyRouteRoute
    }
    '/_authenticated-only/receita/cadastro/{-$id}/': {
      id: '/_authenticated-only/receita/cadastro/{-$id}/'
      path: '/receita/cadastro/{-$id}'
      fullPath: '/receita/cadastro/{-$id}'
      preLoaderRoute: typeof AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRouteImport
      parentRoute: typeof AuthenticatedOnlyRouteRoute
    }
  }
}

interface AuthenticatedOnlyRouteRouteChildren {
  AuthenticatedOnlyIndexRoute: typeof AuthenticatedOnlyIndexRoute
  AuthenticatedOnlyReceitaIdIndexRoute: typeof AuthenticatedOnlyReceitaIdIndexRoute
  AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute: typeof AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute
}

const AuthenticatedOnlyRouteRouteChildren: AuthenticatedOnlyRouteRouteChildren =
  {
    AuthenticatedOnlyIndexRoute: AuthenticatedOnlyIndexRoute,
    AuthenticatedOnlyReceitaIdIndexRoute: AuthenticatedOnlyReceitaIdIndexRoute,
    AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute:
      AuthenticatedOnlyReceitaCadastroChar123IdChar125IndexRoute,
  }

const AuthenticatedOnlyRouteRouteWithChildren =
  AuthenticatedOnlyRouteRoute._addFileChildren(
    AuthenticatedOnlyRouteRouteChildren,
  )

interface Public_onlyRouteRouteChildren {
  Public_onlyEntrarIndexRoute: typeof Public_onlyEntrarIndexRoute
  Public_onlyRegistrarIndexRoute: typeof Public_onlyRegistrarIndexRoute
}

const Public_onlyRouteRouteChildren: Public_onlyRouteRouteChildren = {
  Public_onlyEntrarIndexRoute: Public_onlyEntrarIndexRoute,
  Public_onlyRegistrarIndexRoute: Public_onlyRegistrarIndexRoute,
}

const Public_onlyRouteRouteWithChildren =
  Public_onlyRouteRoute._addFileChildren(Public_onlyRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedOnlyRouteRoute: AuthenticatedOnlyRouteRouteWithChildren,
  Public_onlyRouteRoute: Public_onlyRouteRouteWithChildren,
  SairRoute: SairRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
